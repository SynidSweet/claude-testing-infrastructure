name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  {{#if javascript}}
  test-javascript:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run unit tests
      run: npm test -- --coverage --watchAll=false
    
    - name: Run integration tests
      run: npm run test:integration
      if: success() && steps.install.outcome == 'success'
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
      if: success() && contains(github.event.head_commit.message, '[e2e]') || github.event_name == 'pull_request'
    
    - name: Run Playwright tests
      run: npm run test:e2e
      if: success() && contains(github.event.head_commit.message, '[e2e]') || github.event_name == 'pull_request'
    
    {{#if coverage}}
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: javascript
        name: codecov-javascript
    {{/if}}
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: |
          coverage/
          test-results/
          playwright-report/
  {{/if}}

  {{#if python}}
  test-python:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run code formatting check (Black)
      run: black --check .
    
    - name: Run type checking (mypy)
      run: mypy src/
      continue-on-error: true
    
    - name: Run unit tests
      run: pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
    
    - name: Run integration tests
      run: pytest tests/integration/ -v --cov=src --cov-append --cov-report=xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
    
    {{#if coverage}}
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: python
        name: codecov-python
    {{/if}}
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
          .coverage
  {{/if}}

  {{#if javascript}}{{#if python}}
  test-integration:
    runs-on: ubuntu-latest
    needs: [test-javascript, test-python]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install Node.js dependencies
      run: npm ci
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Start services
      run: |
        # Start Python backend
        python -m src.main &
        
        # Start Node.js frontend
        npm start &
        
        # Wait for services to be ready
        sleep 30
    
    - name: Run full-stack E2E tests
      run: npm run test:e2e:fullstack
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          playwright-report/
          test-results/
  {{/if}}{{/if}}

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    {{#if javascript}}
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true
    {{/if}}
    
    {{#if python}}
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install safety
      run: pip install safety
    
    - name: Run safety check
      run: safety check
      continue-on-error: true
    
    - name: Run bandit security linter
      run: |
        pip install bandit
        bandit -r src/
      continue-on-error: true
    {{/if}}

  build:
    runs-on: ubuntu-latest
    needs: [{{#if javascript}}test-javascript{{/if}}{{#if python}}{{#if javascript}}, {{/if}}test-python{{/if}}]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    {{#if javascript}}
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          build/
          dist/
    {{/if}}
    
    {{#if python}}
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
        pip install -r requirements.txt
    
    - name: Build package
      run: python -m build
    
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/
    {{/if}}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./build
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: rsync, docker push, kubectl apply, etc.
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./build
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your deployment commands here
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on production..."
        # Add smoke test commands here
    
    - name: Notify team
      if: success()
      run: |
        echo "Production deployment successful!"
        # Add notification commands (Slack, email, etc.)